{"version":3,"file":"static/js/94.a210af43.chunk.js","mappings":"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","sources":["redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","views/ContactsView/ContactsView.jsx","views/ContactsView/ContactsView.styled.jsx"],"sourcesContent":["import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\n// Получить все контакты пользователя\n// GET ​/contacts\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error.message));\n  }\n};\n\n// Создать новый контакт\n// POST ​/contacts\nconst addContact =\n  ({ name, number }) =>\n  async dispatch => {\n    const contact = { name, number };\n\n    dispatch(addContactRequest());\n    try {\n      const { data } = await axios.post('/contacts', contact);\n      dispatch(addContactSuccess(data));\n    } catch (error) {\n      dispatch(addContactError(error.message));\n    }\n  };\n\n// Удалить контакт\n// DELETE ​/contacts​/{contactId}\nconst deleteContact = contactId => async dispatch => {\n  dispatch(deleteContactRequest());\n  try {\n    await axios.delete(`/contacts/${contactId}`);\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error.message));\n  }\n};\n\n// Обновить существующий контакт\n// /contacts​/{contactId}\n\nconst contactsOperations = {\n  fetchContacts,\n  addContact,\n  deleteContact,\n};\nexport default contactsOperations;\n","import { createSelector } from '@reduxjs/toolkit';\n\n// const getLoading = state => state.contacts.loading;\n\nconst getFilter = state => state.contacts.filter;\n\nconst getAllContacts = state => state.contacts.items;\n\nconst getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n\nconst contactsSelectors = {\n  // getLoading,\n  getFilter,\n  getAllContacts,\n  getVisibleContacts,\n};\nexport default contactsSelectors;\n","import styled from 'styled-components';\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 24px;\n  label {\n    display: flex;\n    justify-content: space-between;\n    width: 340px;\n    padding: 12px;\n  }\n  input {\n    background-color: #f5f4fa;\n    width: 240px;\n    margin-left: 15px;\n    border-radius: 5px;\n    border: none;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n      color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover {\n      background-color: #aaaaaa;\n    }\n  }\n  button {\n    cursor: pointer;\n    font-size: 16px;\n    line-height: 1.62;\n    text-align: center;\n    width: 120px;\n    background: #f5f4fa;\n    border: none;\n    border-radius: 4px;\n    padding: 4px 10px;\n    margin-left: auto;\n    margin-right: auto;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n      color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n      box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    color: rgba(0, 0, 0, 0.6);\n    text-shadow: 0px 3px 0px #b2a98f, 2 0px 14px 10px rgba(0, 0, 0, 0.15),\n      3 0px 24px 2px rgba(0, 0, 0, 0.1), 4 0px 34px 30px rgba(0, 0, 0, 0.1);\n    &:hover {\n      color: #24f9f9;\n      background-color: #aaaaaa;\n      box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1),\n        0px 1px 2px rgba(0, 0, 0, 0.08), 0px 2px 2px rgba(0, 0, 0, 0.12);\n      border-radius: 4px;\n    }\n  }\n`;\n","// import PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport toast from 'react-hot-toast';\nimport { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport { Form } from './ContactForm.styled';\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const allContacts = useSelector(contactsSelectors.getAllContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const duplicateNameChecking = name =>\n    allContacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n  const duplicateNumberChecking = number =>\n    allContacts.find(contact => contact.number === number);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (duplicateNameChecking(name)) {\n      toast.error(`Sorry, but user ${name} name is already in contacts.`);\n    } else if (duplicateNumberChecking(number)) {\n      toast.error(\n        `Sorry, but user with ${number} phone is already in contacts.`\n      );\n    } else\n      dispatch(contactsOperations.addContact({ name, number })) &&\n        toast.success(\n          `User ${name} with phone number ${number} has been successfully added to the phone book.`\n        );\n    resetForm();\n  };\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id={nameInputId}\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label htmlFor={numberInputId}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          id={numberInputId}\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </Form>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { ImUserMinus } from 'react-icons/im';\nimport { contactsOperations } from '../../redux/contacts';\nconst ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      {name}: {number}\n      <button\n        type=\"button\"\n        onClick={() => dispatch(contactsOperations.deleteContact(id))}\n      >\n        <ImUserMinus size={18}></ImUserMinus>\n      </button>\n    </>\n  );\n};\nContactListItem.protoTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\nexport default ContactListItem;\n","import styled from 'styled-components';\nexport const ContactListWrapper = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  width: 340px;\n  max-height: 240px;\n  overflow: hidden;\n  overflow-y: auto;\n  li {\n    width: 100%;\n    color: rgba(0, 0, 0, 0.6);\n    &:not(:last-child) {\n      margin-bottom: 8px;\n    }\n  }\n  button {\n    cursor: pointer;\n    margin-left: auto;\n    float: right;\n    width: 30px;\n    height: 30px;\n    border-radius: 50%;\n    border: none;\n    color: rgba(0, 0, 0, 0.6);\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n      color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n      box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    :hover {\n      color: #24f9f9;\n      background-color: #aaaaaa;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport ContactListItem from '../ContactListItem';\nimport { contactsSelectors } from '../../redux/contacts';\nimport { ContactListWrapper } from './ContactList.styled';\nexport default function ContactList() {\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n\n  return (\n    <ContactListWrapper>\n      {contacts.length > 0 ? (\n        contacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <ContactListItem id={id} name={name} number={number} />\n          </li>\n        ))\n      ) : (\n        <p>You don't have contacts yet...</p>\n      )}\n    </ContactListWrapper>\n  );\n}\nContactList.protoTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\nexport const FilterWrapper = styled.div`\n  margin-bottom: 24px;\n  input {\n    background-color: #f5f4fa;\n    height: 18px;\n    border-radius: 5px;\n    border: none;\n    margin-left: 12px;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n      color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    &:hover {\n      background-color: #aaaaaa;\n    }\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { FilterWrapper } from './Filter.styled.jsx';\nimport { changeFilter, contactsSelectors } from '../../redux/contacts';\n\nexport default function Filter() {\n  const filter = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <FilterWrapper>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={event => dispatch(changeFilter(event.target.value))}\n      />\n    </FilterWrapper>\n  );\n}\n\n// ==========================================\n// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\n// import { FilterWrapper } from './Filter.styled.jsx';\n// import { changeFilter } from '../../redux/contacts/contacts-actions';\n// const Filter = ({ value, onChangeFilter }) => {\n//   return (\n//     <FilterWrapper>\n//       Find contacts by name\n//       <input type=\"text\" value={value} onChange={onChangeFilter} />\n//     </FilterWrapper>\n//   );\n// };\n// const mapStateToProps = state => ({\n//   value: state.contacts.filter,\n// });\n// const mapDispatchToProps = dispatch => ({\n//   onChangeFilter: event => dispatch(changeFilter(event.currentTarget.value)),\n// });\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n// Filter.protoType = {\n//   value: PropTypes.string,\n//   onChangeFilter: PropTypes.func.isRequired,\n// };\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport ContactForm from '../../components/ContactForm';\nimport ContactList from '../../components/ContactList';\nimport { contactsOperations } from '../../redux/contacts';\nimport Filter from 'components/Filter';\n// import { authOperations } from '../redux/auth';\nimport { AppWrapper, WorkingSpace } from './ContactsView.styled';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n  return (\n    <AppWrapper>\n      <WorkingSpace>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </WorkingSpace>\n    </AppWrapper>\n  );\n}\n","import styled from 'styled-components';\nexport const AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-width: 960px;\n  height: 600px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 10px;\n  border-radius: 15px;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n  background-image: url('https://cdn.pixabay.com/photo/2015/05/31/15/07/coffee-792113_960_720.jpg');\n  background-size: cover;\n  background-position: center;\n  background-color: #aaaaaa;\n  h1 {\n    text-transform: uppercase;\n  }\n  h2 {\n    margin-bottom: 10px;\n  }\n`;\nexport const WorkingSpace = styled.div`\n  margin-top: 60px;\n  margin-left: 300px;\n`;\n"],"names":["contactsOperations","fetchContacts","dispatch","fetchContactsRequest","axios","data","fetchContactsSuccess","fetchContactsError","message","addContact","name","number","contact","addContactRequest","addContactSuccess","addContactError","deleteContact","contactId","deleteContactRequest","deleteContactSuccess","deleteContactError","getFilter","state","contacts","filter","getAllContacts","items","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","Form","styled","ContactForm","useState","setName","setNumber","nameInputId","shortid","numberInputId","allContacts","useSelector","contactsSelectors","useDispatch","handleChange","event","target","value","resetForm","onSubmit","preventDefault","find","duplicateNameChecking","duplicateNumberChecking","toast","htmlFor","type","pattern","title","required","id","onChange","ContactListItem","onClick","size","protoTypes","PropTypes","ContactListWrapper","ContactList","length","map","FilterWrapper","Filter","changeFilter","ContactsPage","useEffect","AppWrapper","WorkingSpace"],"sourceRoot":""}